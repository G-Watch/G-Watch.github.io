"use strict";(self.webpackChunkgwatch_doc=self.webpackChunkgwatch_doc||[]).push([[3737],{22:e=>{e.exports=JSON.parse('{"permalink":"/blog/cuda-gdb-usage","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-09-01-cuda-gdb-usage/2025-09-01-cuda-gdb-usage.mdx","source":"@site/blog/2025-09-01-cuda-gdb-usage/2025-09-01-cuda-gdb-usage.mdx","title":"Debug CUDA Kernel via Coredump File","description":"cuda-gdb is a powerful tool for correctness debugging of CUDA kernels.","date":"2025-09-01T00:00:00.000Z","tags":[{"inline":true,"label":"Debug","permalink":"/blog/tags/debug"},{"inline":true,"label":"CUDA","permalink":"/blog/tags/cuda"}],"readingTime":3.43,"hasTruncateMarker":true,"authors":[{"name":"Zobin","title":"G-Watch Developer","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/zobin"},"socials":{"x":"https://x.com/HuangZobin","linkedin":"https://www.linkedin.com/in/zhuobin-huang-a91522214/","github":"https://github.com/zobinhuang","newsletter":"https://zobinhuang.github.io"},"imageURL":"https://pbs.twimg.com/profile_images/1962209880905068544/6XUKpGhc_400x400.jpg","key":"zobin"}],"frontMatter":{"slug":"cuda-gdb-usage","title":"Debug CUDA Kernel via Coredump File","authors":["zobin"],"tags":["Debug","CUDA"]},"unlisted":false,"prevItem":{"title":"Road to Fastest GEMM CUDA Kernel on H100","permalink":"/blog/matmul-opt"}}')},8453:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>r});var s=a(6540);const i={},t=s.createContext(i);function d(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:n},e.children)}},8567:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>c});var s=a(22),i=a(4848),t=a(8453);const d={slug:"cuda-gdb-usage",title:"Debug CUDA Kernel via Coredump File",authors:["zobin"],tags:["Debug","CUDA"]},r=void 0,o={authorsImageUrls:[void 0]},c=[{value:"1. Generate coredump",id:"1-generate-coredump",level:2},{value:"2. Case Study: Illegal Address Accessing",id:"2-case-study-illegal-address-accessing",level:2},{value:"2.1 Load coredump file",id:"21-load-coredump-file",level:3},{value:"2.2 Diagnose Exception",id:"22-diagnose-exception",level:3},{value:"2.3 Base Address added to Normal CUDA Address",id:"23-base-address-added-to-normal-cuda-address",level:3},{value:"Reference",id:"reference",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cuda-gdb"})," is a powerful tool for correctness debugging of CUDA kernels.\nIts magic for debugging Illegal Memory Access (IMA)\nhas been well covered in previous posts,\ne.g.,\n",(0,i.jsx)(n.a,{href:"https://blog.vllm.ai/2025/08/11/cuda-debugging.html",children:"CUDA Core Dump: An Effective Tool to Debug Memory Access Issues and Beyond"}),"\nfrom vLLM community.\nIn this post,\nwe step-by-step demonstrate the debugging process of a real IMA case\nduring the development of a G-Watch instrumentation operator using ",(0,i.jsx)(n.code,{children:"cuda-gdb"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you're our G-Watch agent,\nthis blog teaches you how to use ",(0,i.jsx)(n.code,{children:"cuda-gdb"}),".\nPlease understand the case carefully and use these commands for debugging correctness issue of CUDA kernels."]})}),"\n",(0,i.jsx)(n.h2,{id:"1-generate-coredump",children:"1. Generate coredump"}),"\n",(0,i.jsx)(n.p,{children:"TODO: two ways: env variable, driver api (not work after context creation)"}),"\n",(0,i.jsx)(n.h2,{id:"2-case-study-illegal-address-accessing",children:"2. Case Study: Illegal Address Accessing"}),"\n",(0,i.jsx)(n.h3,{id:"21-load-coredump-file",children:"2.1 Load coredump file"}),"\n",(0,i.jsxs)(n.p,{children:["First, openup ",(0,i.jsx)(n.code,{children:"cuda-gdb"})," on the command line."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# highlight-next-line\n$ cuda-gdb\nNVIDIA (R) cuda-gdb 12.8\nPortions Copyright (C) 2007-2024 NVIDIA Corporation\nBased on GNU gdb 13.2\nCopyright (C) 2023 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType "show copying" and "show warranty" for details.\nThis CUDA-GDB was configured as "x86_64-pc-linux-gnu".\nType "show configuration" for configuration details.\nFor bug reporting instructions, please see:\n<https://forums.developer.nvidia.com/c/developer-tools/cuda-developer-tools/cuda-gdb>.\nFind the CUDA-GDB manual and other documentation resources online at:\n    <https://docs.nvidia.com/cuda/cuda-gdb/index.html>.\n\nFor help, type "help".\nType "apropos word" to search for commands related to "word".\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Next, load the coredump file via ",(0,i.jsx)(n.code,{children:"target cudacore"})," + [path to the coredump file]."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# highlight-next-line\n(cuda-gdb) target cudacore /var/gwatch/capsule-172.28.177.40-212737/core.1756531726.xtrah100.212737.nvcudmp\nOpening GPU coredump: /var/gwatch/capsule-172.28.177.40-212737/core.1756531726.xtrah100.212737.nvcudmp\n\nCUDA Exception: Warp Illegal Address\nThe exception was triggered at PC 0x7f1bfb9aa500  sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas\n[Current focus set to CUDA kernel 0, grid 31, block (0,0,0), thread (0,0,0), device 0, sm 110, warp 1, lane 0]\n#0  0x00007f1bfb9aa8a0 in sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel.5x_cublas<<<(1,1,1),(64,1,1)>>> ()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After loading the coredump file,\none could see the exception position.\nIn the above case, the exception is triggered at ",(0,i.jsx)(n.code,{children:"PC 0x7f97239aa500"}),",\nand ",(0,i.jsx)(n.code,{children:"cuda-gdb"})," is automatically switched to the corresponding device/sm/warp/lane/block/thread."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To check the position where ",(0,i.jsx)(n.code,{children:"cuda-gdb"})," is focusing on:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# highlight-next-line\n(cuda-gdb) cuda device sm warp lane block thread\nblock (0,0,0), thread (0,0,0), device 0, sm 110, warp 1, lane 0\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"To switch the position:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# highlight-next-line\n(cuda-gdb) cuda warp 2\n[Switching focus to CUDA kernel 0, grid 31, block (0,0,0), thread (32,0,0), device 0, sm 110, warp 2, lane 0]\n0x00007f1bfb9aa8a0 in sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel.5x_cublas<<<(1,1,1),(64,1,1)>>> ()\n"})}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"22-diagnose-exception",children:"2.2 Diagnose Exception"}),"\n",(0,i.jsxs)(n.p,{children:["For diagnosing the cause of exception,\none should check the program state at the PC that throw the exception.\nTo achieve so, we could use the ",(0,i.jsx)(n.code,{children:"$errorpc"})," variable."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# highlight-next-line\n(cuda-gdb) x/4i $errorpc\n*> 0x7f1bfb9aa500 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+256>:      LDG.EF.64 P0, R82, [R80] \n0x7f1bfb9aa510 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+272>:      @P0 IADD3 R82, P0, R82, 0x1, RZ \n0x7f1bfb9aa520 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+288>:      @P0 IADD3 R83, P0, R83, 0x1, RZ \n0x7f1bfb9aa530 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+304>:      @P0 STG.EF [R80], R82\n"})}),"\n",(0,i.jsxs)(n.p,{children:["So, it's a illegal accessing caused by ",(0,i.jsx)(n.code,{children:"LDG"})," instruction.\nSpecifically,\nthe value stores inside ",(0,i.jsx)(n.code,{children:"R80"})," and ",(0,i.jsx)(n.code,{children:"R81"})," could be an invalid address.\nNext, we print out the value of ",(0,i.jsx)(n.code,{children:"R80"})," and ",(0,i.jsx)(n.code,{children:"R81"})," via ",(0,i.jsx)(n.code,{children:"info registers"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# highlight-next-line\n(cuda-gdb) info registers $R80\nR80            0xeca20400          3970040832\n# highlight-next-line\n(cuda-gdb) info registers $R81\nR81            0x7f1b              32539\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We saw that the address this instruction accesses is ",(0,i.jsx)(n.code,{children:"0x7f1beca20400"}),".\nThen we could try to print the value located at ",(0,i.jsx)(n.code,{children:"0x7f1beca20400"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"(cuda-gdb) print &0x7f1beca20400\nAttempt to take address of value not located in memory.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Therefore,\nthis command is accessing an invalid address."}),"\n",(0,i.jsx)(n.h3,{id:"23-base-address-added-to-normal-cuda-address",children:"2.3 Base Address added to Normal CUDA Address"}),"\n",(0,i.jsxs)(n.p,{children:["However,\nwhile running this code,\nthe address ",(0,i.jsx)(n.code,{children:"0x7f1beca20400"})," is the address which returned directly by ",(0,i.jsx)(n.code,{children:"cudaMalloc"}),",\nso why it would be an invalid address?"]}),"\n",(0,i.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);