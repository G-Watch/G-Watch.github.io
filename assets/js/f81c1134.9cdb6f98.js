"use strict";(self.webpackChunkgwatch_doc=self.webpackChunkgwatch_doc||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"matmul-opt","metadata":{"permalink":"/blog/matmul-opt","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-09-07-matmul-opt/2025-09-07-matmul-opt.mdx","source":"@site/blog/2025-09-07-matmul-opt/2025-09-07-matmul-opt.mdx","title":"Road to Fastest GEMM CUDA Kernel on H100","description":"","date":"2025-09-07T00:00:00.000Z","tags":[{"inline":true,"label":"Performance","permalink":"/blog/tags/performance"},{"inline":true,"label":"CUDA","permalink":"/blog/tags/cuda"}],"readingTime":0.07,"hasTruncateMarker":true,"authors":[{"name":"Jasper","title":"G-Watch Developer","url":"https://sg.linkedin.com/in/jaspertzx","page":{"permalink":"/blog/authors/jasper"},"socials":{"linkedin":"https://sg.linkedin.com/in/jaspertzx","github":"https://github.com/Jaspertzx"},"imageURL":"https://github.com/jaspertzx.png","key":"jasper"}],"frontMatter":{"slug":"matmul-opt","title":"Road to Fastest GEMM CUDA Kernel on H100","authors":["jasper"],"tags":["Performance","CUDA"]},"unlisted":false,"nextItem":{"title":"Debug CUDA Kernel via Coredump File","permalink":"/blog/cuda-gdb-usage"}},"content":"import { FlopsChart } from \'@site/blog/2025-09-07-matmul-opt/flops.jsx\';\\n\\n<FlopsChart />\\n\\n\\n\x3c!-- truncate --\x3e"},{"id":"cuda-gdb-usage","metadata":{"permalink":"/blog/cuda-gdb-usage","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-09-01-cuda-gdb-usage/2025-09-01-cuda-gdb-usage.mdx","source":"@site/blog/2025-09-01-cuda-gdb-usage/2025-09-01-cuda-gdb-usage.mdx","title":"Debug CUDA Kernel via Coredump File","description":"cuda-gdb is a powerful tool for correctness debugging of CUDA kernels.","date":"2025-09-01T00:00:00.000Z","tags":[{"inline":true,"label":"Debug","permalink":"/blog/tags/debug"},{"inline":true,"label":"CUDA","permalink":"/blog/tags/cuda"}],"readingTime":3.43,"hasTruncateMarker":true,"authors":[{"name":"Zobin","title":"G-Watch Developer","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/zobin"},"socials":{"x":"https://x.com/HuangZobin","linkedin":"https://www.linkedin.com/in/zhuobin-huang-a91522214/","github":"https://github.com/zobinhuang","newsletter":"https://zobinhuang.github.io"},"imageURL":"https://pbs.twimg.com/profile_images/1962209880905068544/6XUKpGhc_400x400.jpg","key":"zobin"}],"frontMatter":{"slug":"cuda-gdb-usage","title":"Debug CUDA Kernel via Coredump File","authors":["zobin"],"tags":["Debug","CUDA"]},"unlisted":false,"prevItem":{"title":"Road to Fastest GEMM CUDA Kernel on H100","permalink":"/blog/matmul-opt"}},"content":"`cuda-gdb` is a powerful tool for correctness debugging of CUDA kernels.\\nIts magic for debugging Illegal Memory Access (IMA)\\nhas been well covered in previous posts,\\ne.g.,\\n[CUDA Core Dump: An Effective Tool to Debug Memory Access Issues and Beyond](https://blog.vllm.ai/2025/08/11/cuda-debugging.html)\\nfrom vLLM community.\\nIn this post,\\nwe step-by-step demonstrate the debugging process of a real IMA case\\nduring the development of a G-Watch instrumentation operator using `cuda-gdb`.\\n\\n\x3c!-- truncate --\x3e\\n\\n:::note\\nIf you\'re our G-Watch agent,\\nthis blog teaches you how to use `cuda-gdb`.\\nPlease understand the case carefully and use these commands for debugging correctness issue of CUDA kernels.\\n:::\\n\\n## 1. Generate coredump\\n\\nTODO: two ways: env variable, driver api (not work after context creation)\\n\\n## 2. Case Study: Illegal Address Accessing\\n\\n### 2.1 Load coredump file\\n\\nFirst, openup `cuda-gdb` on the command line.\\n\\n```bash\\n# highlight-next-line\\n$ cuda-gdb\\nNVIDIA (R) cuda-gdb 12.8\\nPortions Copyright (C) 2007-2024 NVIDIA Corporation\\nBased on GNU gdb 13.2\\nCopyright (C) 2023 Free Software Foundation, Inc.\\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\nType \\"show copying\\" and \\"show warranty\\" for details.\\nThis CUDA-GDB was configured as \\"x86_64-pc-linux-gnu\\".\\nType \\"show configuration\\" for configuration details.\\nFor bug reporting instructions, please see:\\n<https://forums.developer.nvidia.com/c/developer-tools/cuda-developer-tools/cuda-gdb>.\\nFind the CUDA-GDB manual and other documentation resources online at:\\n    <https://docs.nvidia.com/cuda/cuda-gdb/index.html>.\\n\\nFor help, type \\"help\\".\\nType \\"apropos word\\" to search for commands related to \\"word\\".\\n```\\n\\nNext, load the coredump file via `target cudacore` + [path to the coredump file].\\n\\n```bash\\n# highlight-next-line\\n(cuda-gdb) target cudacore /var/gwatch/capsule-172.28.177.40-212737/core.1756531726.xtrah100.212737.nvcudmp\\nOpening GPU coredump: /var/gwatch/capsule-172.28.177.40-212737/core.1756531726.xtrah100.212737.nvcudmp\\n\\nCUDA Exception: Warp Illegal Address\\nThe exception was triggered at PC 0x7f1bfb9aa500  sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas\\n[Current focus set to CUDA kernel 0, grid 31, block (0,0,0), thread (0,0,0), device 0, sm 110, warp 1, lane 0]\\n#0  0x00007f1bfb9aa8a0 in sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel.5x_cublas<<<(1,1,1),(64,1,1)>>> ()\\n```\\n\\nAfter loading the coredump file,\\none could see the exception position.\\nIn the above case, the exception is triggered at `PC 0x7f97239aa500`,\\nand `cuda-gdb` is automatically switched to the corresponding device/sm/warp/lane/block/thread.\\n\\n:::tip\\n* To check the position where `cuda-gdb` is focusing on:\\n    ```bash\\n    # highlight-next-line\\n    (cuda-gdb) cuda device sm warp lane block thread\\n    block (0,0,0), thread (0,0,0), device 0, sm 110, warp 1, lane 0\\n    ```\\n\\n* To switch the position:\\n    ```bash\\n    # highlight-next-line\\n    (cuda-gdb) cuda warp 2\\n    [Switching focus to CUDA kernel 0, grid 31, block (0,0,0), thread (32,0,0), device 0, sm 110, warp 2, lane 0]\\n    0x00007f1bfb9aa8a0 in sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel.5x_cublas<<<(1,1,1),(64,1,1)>>> ()\\n    ```\\n:::\\n\\n### 2.2 Diagnose Exception\\n\\nFor diagnosing the cause of exception,\\none should check the program state at the PC that throw the exception.\\nTo achieve so, we could use the `$errorpc` variable.\\n\\n```bash\\n# highlight-next-line\\n(cuda-gdb) x/4i $errorpc\\n*> 0x7f1bfb9aa500 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+256>:      LDG.EF.64 P0, R82, [R80] \\n0x7f1bfb9aa510 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+272>:      @P0 IADD3 R82, P0, R82, 0x1, RZ \\n0x7f1bfb9aa520 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+288>:      @P0 IADD3 R83, P0, R83, 0x1, RZ \\n0x7f1bfb9aa530 <sm80_xmma_gemm_f32f32_f32f32_f32_nn_n_tilesize32x32x8_stage3_warpsize1x2x1_ffma_aligna4_alignc4_execute_kernel__5x_cublas+304>:      @P0 STG.EF [R80], R82\\n```\\n\\nSo, it\'s a illegal accessing caused by `LDG` instruction.\\nSpecifically,\\nthe value stores inside `R80` and `R81` could be an invalid address.\\nNext, we print out the value of `R80` and `R81` via `info registers`.\\n\\n```bash\\n# highlight-next-line\\n(cuda-gdb) info registers $R80\\nR80            0xeca20400          3970040832\\n# highlight-next-line\\n(cuda-gdb) info registers $R81\\nR81            0x7f1b              32539\\n```\\n\\nWe saw that the address this instruction accesses is `0x7f1beca20400`.\\nThen we could try to print the value located at `0x7f1beca20400`.\\n\\n```bash\\n(cuda-gdb) print &0x7f1beca20400\\nAttempt to take address of value not located in memory.\\n```\\n\\nTherefore,\\nthis command is accessing an invalid address.\\n\\n### 2.3 Base Address added to Normal CUDA Address\\n\\nHowever,\\nwhile running this code,\\nthe address `0x7f1beca20400` is the address which returned directly by `cudaMalloc`,\\nso why it would be an invalid address?\\n\\n## Reference\\n\\n> 1."}]}}')}}]);